Problem Statement: 
Given an array of N integers. Find the elements that appear more than N/3 times 
in the array. If no such element exists, return an empty vector.

Example 1:
Input Format: N = 5, array[] = {1,2,2,3,2}
Result: 2
Explanation: Here we can see that the Count(1) = 1, Count(2) = 3 and Count(3) = 1.
Therefore, the count of 2 is greater than N/3 times. Hence, 2 is the answer.

========================================================================

Brute Force Approach

arr[] = [1 1 1 3 3 2 2 2]  n = 8

[1, 2] these 2 elements appears more than 2 times
here there are 2 interges that are appearing more than (N/3) = (8/3) = 2 times.

Observation: How many integers can occur more than floor(N/3) times in the given array:

If we closely observe, in the given array, there can be a maximum of two integers that 
can occur more than floor(N/3) times. Let’s understand it using the following scenario:
Assume there are 8 elements in the given array. Now, if there is any majority element, 
it should occur more than floor(8/3) = 2 times. So, the majority of elements should occur 
at least 3 times. Now, if we imagine there are 3 majority elements, then the total 
occurrence of them will be 3X3 = 9 i.e. greater than the size of the array. But this 
should not happen. That is why there can be a maximum of 2 majority elements.

1.  We will run a loop that will select the elements of the array one by one.
2.  Now, for each unique element, we will run another loop and count its occurrence 
in the given array.
3.  If any element occurs more than the floor of (N/3), we will include it in our answer. 
4.  While traversing if we find any element that is already included in our answer, we will 
just skip it.

public static List<Integer> majorityElement(int []v) {
        int n = v.length; //size of the array
        List<Integer> ls = new ArrayList<>(); // list of answers

        for (int i = 0; i < n; i++) {
            //selected element is v[i]:
            // Checking if v[i] is not already
            // a part of the answer:
            if (ls.size() == 0 || ls.get(0) != v[i]) {
                int cnt = 0;
                for (int j = 0; j < n; j++) {
                    // counting the frequency of v[i]
                    if (v[j] == v[i]) {
                        cnt++;
                    }
                }

                // check if frquency is greater than n/3:
                if (cnt > (n / 3))
                    ls.add(v[i]);
            }

            if (ls.size() == 2) break;
        }

        return ls;
    }

Time Complexity: O(N2), where N = size of the given array.
Reason: For every element of the array the inner loop runs for N times. 
And there are N elements in the array. So, the total time complexity is O(N2).

Space Complexity: O(1) as we are using a list that stores a maximum of 2 elements. 
The space used is so small that it can be considered constant.

=============================================================================
Better Approach (Using Hashing): 

Intuition:
Use a better data structure to reduce the number of look-up operations and hence the 
time complexity. Moreover, we have been calculating the count of the same element again 
and again – so we have to reduce that also.

Approach: 
The steps are as follows:
1.  Use a hashmap and store the elements as <key, value> pairs. (Can also use frequency array
 based on the size of nums).
Here the key will be the element of the array and the value will be the number of times 
it occurs. 
2.  Traverse the whole array and update the occurrence of each element. 
3.  After that, check the map if the value for any element is greater than the floor of N/3. 
    If yes, include it in the list. 
    Else iterate forward.
4.  Finally, return the list.


Dry Run: 
Let’s take the example of arr[] = {10,20,40,40,40}, n=5.

First, we create an unordered map to store the count of each element.

Now traverse through the array 

Found 10 at index 0, increase the value of key 10 in the map by 1.

Found 20 at index 1, increase the value of key 20 in the map by 1.

Found 40 at index 2, increase the value of key 40 in the map by 1.

Found 40 at index 3, increase the value of key 40 in the map by 1.

Found 40 at index 4, increase the value of key 40 in the map by 1.

Now, Our map will look like this:

10 -> 1 
20 -> 1
40 -> 3
Now traverse through the map, 

We found that the value of key 40 is greater than the floor(N/3). So, 40 is the answer.

public static List<Integer> majorityElement(int []v) {
        int n = v.length; //size of the array
        List<Integer> ls = new ArrayList<>(); // list of answers

        //declaring a map:
        HashMap<Integer, Integer> mpp = new HashMap<>();

        // least occurrence of the majority element:
        int mini = (int)(n / 3) + 1;

        //storing the elements with its occurnce:
        for (int i = 0; i < n; i++) {
            int value = mpp.getOrDefault(v[i], 0);
            mpp.put(v[i], value + 1);

            //checking if v[i] is
            // the majority element:
            if (mpp.get(v[i]) == mini) {
                ls.add(v[i]);
            }
            if (ls.size() == 2) break;
        }
}
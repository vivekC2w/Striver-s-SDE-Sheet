Input: 
cookies = [8,15,10,20,8], 
k = 2 (no of childs we need to distribute cookies)

Find Min unfairness of distribution
Unfairness represents maximum between the distributions and we need to take min value out of 
the max distributions => min(max(distributions))
Using Back-Tracking

Intially we will be having min fairness variable 
min_unfairness = infinity
dist = [0, 0]
cookies = [8,15,10,20,8]
for loop i = 0 to 4

for i = 0
    dist = [8, 0]
    max(dist) = 8

for i = 1
    dist = [(8+15)=23, 0]
    max(dist) = 23
for i = 2
    dist = [(23+10)=33, 0]
    max(dist) = 33
for i = 3
    dist = [(33+20)=53, 0]
    max(dist) = 53
for i = 4
    dist = [53+8=61, 0]
    max(dist) = 61

min_unfairness = min(min_unfairness, dist)
min_unfairness = min(infinity, 61) = 61

now here we are doing backtracking. we return back we are at index 4

cookies = [8,15,10,20,8]
                      |
subtract 8 from dist[61, 0]
dist = [53, 0] we pick only 1st child now we have to pick 2nd child
        i   j
Add 8 to second child i.e. j
dist = [53, 8]

continue the for loop
           0 1  2  3  4 5
cookies = [8,15,10,20,8]
                        |
we are at the end of cookies arrays i.e. index 5
when we reach at end of index we have to update our min_unfairness
max(dist[53, 8]) = 53
min_unfairness = min(min_unfairness, max(dist[53, 8]))
min_unfairness = min(61, 53)
min_unfairness = 53

keep doing this right so at some point we will get our ditribution like dist = [31, 30]
31 will be min_unfairness
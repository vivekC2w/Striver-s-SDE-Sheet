Input: row = 2, col = 2, 
cells = [[1,1],[2,1],[1,2],[2,2]]
cordinates for each day where the water will be filled in the matrix
we have to start from first row and reached the last row by travelling only through land i.e. '0'.


Output: 2
Explanation: The above image depicts how the matrix changes each day starting from day 0.
The last day where it is possible to cross from top to bottom is on day 2.

row = 3, col = 3, 
cells = [[1,2],[2,1],[3,3],[2,2],[1,1],[1,3],[2,3],[3,2],[3,1]]
[1 represents flodded portion(water portion)]

 R  C->[1]  [2]  [3]
[1]     0    0    0
[2]     0    0    0
[3]     0    0    0 

Day 1: 
[1, 2]
 R  C->[1]  [2]  [3]
[1]     0    1    0
[2]     0    0    0
[3]     0    0    0 

we have 2 options to traverse to last via 1st cell and 3rd cell of first row
Day 2:
moving to next day flodding the cell [2, 1]
[1, 2] -> [2, 1]
 R  C->[1]  [2]  [3]
[1]     0    1    0
[2]     1    0    0
[3]     0    0    0 
now we can traverse through option [1, 1] because there is water in both direction
in right as well as down, As second cell [2, 1] already filled with water we can 
not travel from the 2nd cell as well. The only option we have is travelling through
3rd cell to last row.

Day 3:
[1, 2] -> [2, 1] -> [3, 3]
 R  C->[1]  [2]  [3]
[1]     0    1    0
[2]     1    0    0
[3]     0    0    1
still we can travel to the other cells in last row from the last row from the
first cell[1, 3]

Day 4:
[1, 2] -> [2, 1] -> [3, 3] -> [2, 2]
 R  C->[1]  [2]  [3]
[1]     0    1    0
[2]     1    1    0
[3]     0    0    1
Now the only option that we had [2, 2] travel from third cell is also blocked
Now we can not traverse from 1st row to last row, so we are stopping at third
day itself. so these is gonna be our Output
======================================================================

How to approach it?

BFS Technique to traverse through the cells and reach to the last row
Queue which is going to hold the cordinates where we can travel through land

start from very 1st row adding the cells which are having zeros from those cells 
we are going to travel through the rest f the cells to next row and then to the
last row whichever cells reaches the last row we will update the result according
to that 

If we are trying to perform BFS for each filling of water at each day then it is going
to Time Limit Exceed bcz there is lot of input after every input if you try to check 
then definetly it is not going to run in optimal time.

BFS In Better way?
Using Binary Search
As we know there are inputs for 9 days given in the cell so obviously the Output is
going to be either from 1 to 9 so we know the limit or the bounds of our result,
so in that case if we know lower bound and upper bound then we obviously go for Binary
search and bound is in ascending order.

This is going to work in O(row*col*log(row*col))
To iterate each row and col it's going to take row*col time and to do a Binary
search it will take log(row*col) time
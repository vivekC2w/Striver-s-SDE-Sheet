Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

First Brute Force Approach
This approach consists of taking the two loops one for traversing the string and another 
loop – nested loop for finding different substrings and after that, we will check for all 
substrings one by one and check for each and every element if the element is not found 
then we will store that element in HashSet otherwise we will break from the loop and count 
it.

Time Complexity: O( N^2 )

Space Complexity: O(N) where N is the size of HashSet taken for storing the elements

======================================================================================

Solution 2: Optimised  Approach 1

Approach: We will have two pointers left and right. Pointer ‘left’ is used for maintaining 
the starting point of the substring while ‘right’ will maintain the endpoint of the 
substring.’ right’ pointer will move forward and check for the duplicate occurrence of the 
current element if found then the ‘left’ pointer will be shifted ahead so as to delete the
 duplicate elements.
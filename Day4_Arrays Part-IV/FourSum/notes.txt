Problem Statement: Given an array of N integers, your task is to find unique quads that 
add up to give a target value. In short, you need to return an array of all the unique 
quadruplets [arr[a], arr[b], arr[c], arr[d]] such that their sum is equal to a given target.

0 <= a, b, c, d < n
a, b, c, and d are distinct.
arr[a] + arr[b] + arr[c] + arr[d] == target

arr[] = {1, 0, -1, 0, -2, 2},   Target = 0

{
[-2 -1 1 2],
[-2 0 0 2], 
[-1 0 0 1] 
}
make sure all 4 indexes that we are choosing will always unique

=========================================================================

BRUTE FORCE APPROACH

First, we will declare a set data structure as we want unique quadruplets.
Then we will use the first loop(say i) that will run from 0 to n-1.
Inside it, there will be the second loop(say j) that will run from i+1 to n-1.
Then there will be the third loop(say k) that runs from j+1 to n-1.
Inside loop k, the fourth loop(say l) will run from k+1 to n-1.
Now, inside these four nested loops, we will check the sum i.e. arr[i]+arr[j]+arr[k]+arr[l], and if it is equal to the target we will sort this quadruplet and insert it in the set data structure.
Finally, we will return a list of stored quadruplets.

Time Complexity: O(N4), where N = size of the array.
Reason: Here, we are mainly using 4 nested loops. But we not considering the time 
complexity of sorting as we are just sorting 4 elements every time.

Space Complexity: O(2 * no. of the quadruplets) as we are using a set data structure and 
a list to store the quads.

============================================================================================

Better Approach (Using 3 loops and set data structure): 

First, we will declare a set data structure as we want unique quadruplets.
Then we will use the first loop(say i) that will run from 0 to n-1.
Inside it, there will be the second loop(say j) that will run from i+1 to n-1.
Before the third loop, we will declare a HashSet to store the specific array elements as we intend to search the fourth element in that HashSet.
Then there will be the third loop(say k) that runs from j+1 to n-1.
Inside the third loop, we will calculate the value of the fourth element i.e. target â€“ (nums[i]+nums[j]+nums[k]).
If the fourth element exists in the HashSet, we will sort these four values i.e. nums[i], nums[j], nums[k], and the fourth element, and insert it in the set data structure declared in step 1.
After that, we will insert the k-th element i.e. nums[k] in the HashSet as we only want to insert those array elements that are in between indices j and k.
Finally, we will return a list of stored quadruplets stored in the set data structure.

Complexity Analysis
Time Complexity: O(N3*log(M)), where N = size of the array, M = no. of elements in the set.
Reason: Here, we are mainly using 3 nested loops, and inside the loops there are some 
operations on the set data structure which take log(M) time complexity.

Space Complexity: O(2 * no. of the quadruplets)+O(N)
Reason: we are using a set data structure and a list to store the quads. This results in 
the first term. And the second space is taken by the set data structure we are using to 
store the array elements. At most, the set can contain approximately all the array elements
 and so the space complexity is O(N).

 =========================================================================================
Optimal Approach: 
In this approach, we intend to get rid of two things i.e. the HashSet we were using for 
the look-up operation and the set data structure used to store the unique quadruplets.

Now, we need to first understand what the HashSet and the set were doing to make our 
algorithm work without them. So, the set data structure was basically storing the unique 
quadruplets in sorted order and the HashSet was used to search for the fourth element.

To get the quadruplets in sorted order, we will sort the entire array in the first step 
and to get the unique quads, we will simply skip the duplicate numbers while moving the 
pointers.

Now, we can also remove the HashSet as we have two moving pointers i.e. k and l that will 
find the appropriate value of nums[k] and nums[l]. So, we do not need the HashSet anymore.


Time Complexity: O(N3), where N = size of the array.
Reason: Each of the pointers i and j, is running for approximately N times. And both the 
pointers k and l combined can run for approximately N times including the operation of 
skipping duplicates. So the total time complexity will be O(N3). 

Space Complexity: O(no. of quadruplets), This space is only used to store the answer. 
We are not using any extra space to solve this problem. So, from that perspective, 
space complexity can be written as O(1).

Given:
arr = [4, 3, 6, 2, 1, 1]  n = 6

You have given 6 integers will be from 1 to 6

[1 1 2 3 4 6]
[1 2 3 4 5 6]

1 is repeating number and 5 is missing number
return [1, 5]

==================================================================

Optimal SOlution:
As we know all the intergers from 1 to n. i.e. 1 to 6
we will check for each and every number 1 by 1 if it is present in array or appears more than 1 times
pick up every number from 1 to 6 and I'll do the iterations over array
to check if it is present in array or appears multiple times in array

for(i = 1 -> n) {
    cnt = 0;
    for(j = 0 -> n - 1) {
        if(arr[j] == i)
            cnt++;
    }
    if(cnt >= 2) repeating = i;
    else if(cnt == 0) missing = i;
    if(repeating != -1 && missing != -1)
        break;
}
int[] ans = {repeating, missing};
return ans;
Time Complexity: O(N2), where N = size of the given array.
Space Complexity: O(1) as we are not using any extra space.

===================================================================

Better Approach (Using Hashing)

The range of the number is 1 to N. So, we need a hash array of size N+1 
(as we want to store the frequency of N as well).
Intially Intialize everything as zero
arr = [4, 3, 6, 2, 1, 1]

hashArr = [0, 0, 0, 0, 0, 0, 0];
index   =  0  1  2  3  4  5  6

We will iterate all the elements of the given array and update the hash array 
accordingly i.e. hash[a[i]] = hash[a[i]]+1.

we will go to that particular index and increment counter by 1
for arr[0] = 4, go to index 4 and increment it by 1 
hashArr = [0, 0, 0, 0, 1, 0, 0];
index   =  0  1  2  3  4  5  6

for arr[1] = 3, go to index 3 and increment it by 1 
hashArr = [0, 0, 0, 1, 1, 0, 0];
index   =  0  1  2  3  4  5  6

for arr[2] = 6, go to index 6 and increment it by 1 
hashArr = [0, 0, 0, 1, 1, 0, 1];
index   =  0  1  2  3  4  5  6

Likewise Finally hashArr will become = [0, 2, 1, 1, 1, 0, 1];

As we know number are from 1 to n so start Iterrating from 1 to 6

for index 1 count is 2 so it will be our repeating number

and missing number will be count = 0 i.e. 5

Time Complexity: O(2N), where N = the size of the given array.
Reason: We are using two loops each running for N times. So, the time complexity will be O(2N).

Space Complexity: O(N) as we are using a hash array to solve this problem.

================================================================================

Optimal SOlution Using Basic Mathematics

arr = [4, 3, 6, 2, 1, 1], n = 6

I'll take x -> repeating number and y -> missing

 I'll sum up all elemnts in array = 4 + 3 + 6 + 2 + 1 + 1 = 17
 Also sum up all numbers from 1 to n = 1 + 2 + 3 + 4 + 5 + 6 = 21
(4 + 3 + 6 + 2 + 1 + 1) - (1 + 2 + 3 + 4 + 5 + 6)
 4 + 3 + 6 + 2 + 1 + 1 - 1 - 2 - 3 - 4 - 5 - 6
 +1 + 1 -1 + 2 - 2 + 3 - 3 + 4 - 4 -5 + 6 - 6
 (1 - 5) = -4
  
repeating - missing = -4  -----------eq<1>
x - y = -4  -----------eq<1>

After that we take summation of squares of the first N numbers is:

the summation of squares of the first N numbers is:

S2 = the summation of squares of all the elements in the given array.

(4^2 + 3^2 + 6^2 + 2^2 + 1^2 + 1^2) - (1^2 + 2^2 + 3^2 + 4^2 + 5^2 + 6^2)
(1^2) - (5^2) = -24
(repeating)^2 - (missing)^2 = -24 -----------eq<1>
(x)^2 - (y)^2 = -24 -----------eq<1>
(x-y)(x+y) = -24
-4(x+y) = -24 -----------From eq <1> 
(x+y) = 6 

x + y = 6
x - y = -4
===========
2x    = 2
x = 1
y = 5

        long n = a.length; // size of the array
        // Find Sn and S2n:
        long SN = (n * (n + 1)) / 2;
        long S2N = (n * (n + 1) * (2 * n + 1)) / 6;

        // Calculate S and S2:
        long S = 0, S2 = 0;
        for (int i = 0; i < n; i++) {
            S += a[i];
            S2 += (long)a[i] * (long)a[i];
        }

        //S-Sn = X-Y:
        long val1 = S - SN;

        // S2-S2n = X^2-Y^2:
        long val2 = S2 - S2N;

        //Find X+Y = (X^2-Y^2)/(X-Y):
        val2 = val2 / val1;

        //Find X and Y: X = ((X+Y)+(X-Y))/2 and Y = X-(X-Y),
        // Here, X-Y = val1 and X+Y = val2:
        long x = (val1 + val2) / 2;
        long y = x - val1;

        int[] ans = {(int)x, (int)y};
        return ans;
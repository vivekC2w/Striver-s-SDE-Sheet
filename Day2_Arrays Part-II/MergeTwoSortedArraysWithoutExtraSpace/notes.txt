

Merge Two sorted array without using any extra space
nums1 = [1,3,5,7], m = 4, 
nums2 = [0, 2, 4, 6, 8, 9] n = 5

both the arrays sorted in itself
if we merge both of them merge version will be 
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for that in given arrays we will reshuffle the elements in such a way that elements are 
placed in sorted order 
nums1 = [0, 1, 2, 3]
nums2 = [4, 5, 6, 7, 8, 9]

=======================================================================

Brute Force or simple solution by using extra space

nums1 = [1,3,5,7], m = 4, 
nums2 = [0, 2, 4, 6, 8, 9] n = 5

create a new array of length m+n
ansArray[m + n]

Then compare elements from nums1 and nums2 and put them into ansArray 
ansArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

 int ansArr[m+n];
 int left = 0;
 int right = 0;
 int index = 0;
 while(left < n && right < m) {
    if(nums1[left] <= nums2[right]) {
        ansArr[index] = nums1[left];
        left++; index++;
    } else {
        ansArr[index] = nums2[right];
        right++; index++;
    }
 }

 //if we still have remaining elements in left array(nums1)
 while(left < n) {
    ansArr[index] = nums1[left];
    left++; index++;
 }

 //if we still have remaining elements in right array(nums2)
 while(right < n) {
    ansArr[index] = nums1[right];
    right++; index++;
 } 

And lastly print ansArray
Time complexity will be O(n+m) to put everything into ansArray

Space complexity will be O(m+n)

=====================================================================

Two pointers approach

[0, 1, 2, 3]        [0, 2, 4, 6, 8, 9]
          |          |
        left        right

int left = n-1;
int right = 0;

while(left >= 0 && right < m) {
    if(arr1[left] > arr2[right]) {
        swap(arr1[left], arr2[right]);
        left--;
        right++;
    } else {
        break;
    }
    sort(arr1, arr1 + n);
    sort(arr2, arr2 + m);
}

Time complexity -> O(min(n, m))

==============================================================================

Optimal Solution -> Gap Method
This gap method is based on a sorting technique called shell sort. The intuition of this 
method is simple. 

Intuition: Similar to optimal approach 1, in this approach, we will use two pointers 
i.e. left and right, and swap the elements if the element at the left pointer is greater 
than the element at the right pointer. 

But the placing of the pointers will be based on the gap value calculated. 
The formula to calculate the initial gap is the following:

Initial gap = ceil((size of arr1[] + size of arr2[]) / 2)

Assume the two arrays as a single continuous array and initially, we will place the 
left pointer at the first index and the right pointer at the (left+gap) index of that 
continuous array.

Now, we will compare the elements at the left and right pointers and move them by 1 
place each time after comparison. While comparing we will swap the elements if the 
element at the left pointer > the element at the right pointer. After some steps, 
the right pointer will reach the end and the iteration will be stopped.

After each iteration, we will decrease the gap and will follow the same 
procedure until the iteration for gap = 1 gets completed. Now, after each iteration, 
the gap will be the following:

gap = ceil( previous gap / 2)

The whole process will be applied to the imaginary continuous array constructed using 
arr1[] and arr2[].

Approach:

The steps are as follows:

First, assume the two arrays as a single array and calculate the gap value i.e. 
ceil((size of arr1[] + size of arr2[]) / 2).
We will perform the following operations for each gap until the value of the gap becomes 
0:
Place two pointers in their correct position like the left pointer at index 0 and the 
right pointer at index (left+gap).
Again we will run a loop until the right pointer reaches the end i.e. (n+m). 
Inside the loop, there will be 3 different cases:
If the left pointer is inside arr1[] and the right pointer is in arr2[]: 
We will compare arr1[left] and arr2[right-n] and swap them if arr1[left] > arr2[right-n].
If both the pointers are in arr2[]: We will compare arr1[left-n] and arr2[right-n] 
and swap them if arr1[left-n] > arr2[right-n].
If both the pointers are in arr1[]: We will compare arr1[left] and arr2[right] 
and swap them if arr1[left] > arr2[right].
After the right pointer reaches the end, we will decrease the value of the gap y
and it will become ceil(current gap / 2). 
Finally, after performing all the operations, we will get the merged sorted array.

Time Complexity: O((n+m)*log(n+m)), where n and m are the sizes of the given arrays.
Reason: The gap is ranging from n+m to 1 and every time the gap gets divided by 2. 
So, the time complexity of the outer loop will be O(log(n+m)). Now, for each value of 
the gap, the inner loop can at most run for (n+m) times. So, the time complexity of the 
inner loop will be O(n+m). So, the overall time complexity will be O((n+m)*log(n+m)).

Space Complexity: O(1) as we are not using any extra space.
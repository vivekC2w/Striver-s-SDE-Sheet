The divide and conquer approach involves splitting the array into two halves and finding the maximum subarray sum in the left half, the right half, and the subarray crossing the midpoint. We then take the maximum of these three values as the maximum subarray sum.

The maxSubArrayHelper method is a recursive method that splits the array into two halves, calls itself on the two halves, and returns the maximum subarray sum of the three possible cases.

The maxCrossingSubArray method finds the maximum subarray sum that crosses the midpoint of the array. We iterate from the midpoint to the left and find the maximum sum of the left half, and we iterate from the midpoint + 1 to the right and find the maximum sum of the right half. We then return the sum of the two halves.

1st Approach O(n^3) solution 
Iterate over all the subarrays and we will try to find out the maximum subarray
1st loop -> for(i to (0 to n-1))
	2nd loop -> for(j to (i to n-1))
			3rd loop -> for(k to (i to j)) //Iterate through subarray i to j
						sum += 
			we can use max variable to store max sum
			
2nd optimal solution quadreatic time complexity
1st loop -> for(i to (0 to n-1))
	sum = 0
	2nd loop -> for(j to (i to n-1)) //basically here we are moving j by 1 and sub array we are considering is i to j so we can skip this 3rd loop we can initialize sum = 0 over 2nd for loop
					sum += a[j];       //because every time j is moving it is adding one more element to subarray in this way we can eliminate third for loop and complexity will be O(n^2)
					
most optimal 	using kadane's algo			
initially we will take sum = 0 and max var which will have 1st ele bcz prblm statement states that subarray shou;d have atleast 1 ele
max = a[0];
//arr = [-2, -3, 4, -1, -2, 1, 5, -3]
Linear traversal through array
sum = -2  //if sum is less than 0 then we will update it to zero and move forward and max = -2
sum = 0  and a[i] = -3
sum += a[i]  // sum = -3 // again update sum to zero
sum = 4 and max = 4 which greater than previous max sum 
next ele arr[3] = -1 
sum = 4 -1 = 3  and max sum will compare with previous sum which greater than current sum so it won't change and max = 4
//this what kadane's algo intution is we will carry we are taking -1 along with 4 which is actuallly giving positive sum, we carry subarray sum as long AS we get positive sum 
arr[4] = -2
sum = 3 - 2 = 1 and max = 4 won't change
still carrying subarray 4, -1, -2
arr[5] = 1
sum = 1 + 1 = 2 and max = 4
arr[6] = 5
sum = 2 + 5 = 7 and max = 7

Time complexity is O(n) and space complexity is O(1)
					
					
					
					
					
					
					
					
					
					
					
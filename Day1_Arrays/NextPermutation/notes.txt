
Understand the problem
Next Permutation =>

arr[] = {3, 1, 2}

Permutations =
 3! = 6 permutations possible

1   2   3
1   3   2
2   1   3
2   3   1
3   1   2 //next permutaion of this
3   2   1

And they are always in sorted order(Dictionary order) => 123 < 132 < 213 < 231 < 312 < 321

so answer will be => 3 2 1

But for arr[] = {3, 2, 1} what will be the next permutaion?
Bcz there is no next permutaion. If there is no one after given arr then cosider 1st permutation

================================================================================

BRUTE FORCE SOLUTION

Approach :

Step 1: Find all possible permutations of elements present and store them.
Generate all the permutations in sorted order.

Step 2: Search input from all possible permutations.
Linear search in order to find input array

Step 3: Print the next permutation present right after it.


Time Complexity :

For finding, all possible permutations, it is taking N!xN. N represents the number 
of elements present in the input array. Also for searching input arrays from all possible 
permutations will take N!. Therefore, it has a Time complexity of O(N!xN).

Space Complexity :

Since we are not using any extra spaces except stack spaces for recursion calls. 
So, it has a space complexity of O(1).

===================================================================================

OPTIMAL SOLUTION

arr[] = [2, 1, 5, 4, 3, 0, 0]   n = 7


1. Longer Prefix Match
In order to get longer prefix match we have to keep a very long prefix match 
arr[] = [2, 1, 5, 4, 3, 0, 0]
//If we try to match everything we will get same array
    [2, 1, 5, 4, 3, 0, 0] we will get same array not possible
//If we try to match untill second last ele i.e.[2, 1, 5, 4, 3, 0] and rearrange last ele [0]
    [2, 1, 5, 4, 3, 0, 0] again same array so not possible
//If we try to match untill third ele from last i.e.[2, 1, 5, 4, 3] and rearrange last 2 elements [0, 0]
    [2, 1, 5, 4, 3, 0, 0] again same array so not possible
//If we try to match untill fourth ele from last i.e.[2, 1, 5, 4] and rearrange last 3 elements [3, 0, 0]
    [3, 0, 0] which we can rearrange 0 3 0 and 0 0 3 both will give smaller no so thats not possible
//If we try to match untill fifth ele from last i.e.[2, 1, 5] and rearrange last 4 elements [4, 3, 0, 0]
    [4 3 0 0] which we can rearrange 
    [3 4 0 0] which is smaller number 
    [0 0 3 4] which is smaller number 
    [0 0 4 3] which is smaller number 
    [0 4 3 0] which is smaller number 
no one is greater than [4 3 0 0] so three prefix match is not possible
//If we try to match untill sixth ele from last i.e.[2, 1] and rearrange last 4 elements [5, 4, 3, 0, 0]
    [5 4 3 0 0] which we can rearrange 
    [4 5 3 0 0] which is smaller number 
    [3 4 5 0 0] which is smaller number 
    like wise we can try rearranging all numbers but we will not get anything greater
    because we have 5 at leftmost index and we will need greater than 5 in order to get greater
    number 
no one is greater than [5 4 3 0 0] so three prefix match is not possible

//If we try to match untill seventh ele from last i.e.[2] and rearrange last 4 elements [1, 5, 4, 3, 0, 0]
    [1 5 4 3 0 0] which we can rearrange 
    next rearrangement we will take like someone is greater than 1 but smallest
1.  Find the break-point, i: Break-point means the first index i from the back of the given array where arr[i] 
    becomes smaller than arr[i+1].
    For example, if the given array is {2,1,5,4,3,0,0}, the break-point will be 
    index 1(0-based indexing). Here from the back of the array, index 1 is the first 
    index where arr[1] i.e. 1 is smaller than arr[i+1] i.e. 5.
    To find the break-point, using a loop we will traverse the array backward and 
    store the index i where arr[i] is less than the value at index (i+1) i.e. arr[i+1].

2.  If such a break-point does not exist i.e. if the array is sorted in decreasing order, 
the given permutation is the last one in the sorted order of all possible permutations. 
So, the next permutation must be the first i.e. the permutation in increasing order.
So, in this case, we will reverse the whole array and will return it as our answer.

3.  If a break-point exists:
Find the smallest number i.e. > arr[i] and in the right half of index i(i.e. from index 
i+1 to n-1) and swap it with arr[i].
Reverse the entire right half(i.e. from index i+1 to n-1) of index i. And finally, 
return the array.



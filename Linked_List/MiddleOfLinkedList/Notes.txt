Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Input: head = [1,2,3,4,5,6]  //If there are two middle nodes, return the second middle node.
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

----------------------------------------------------

We have given only HEAD of linkedList

HEAD
1 -> 2 -> 3 -> 4 -> 5 -> NULL   
len = 5 / 2 = 2 + 1 = 3
First Appraoch is we will traverse from 1st to last node calculate the length of Linked List
Then take dummy node traverse up to that point and then return that Dummy Node

Time Complexity will be
O(N) + O(N/2)

Space Complexity will be O(1)

We can optimise it by using tortoise method 
slowPointer and fastPointer both will points to 1st element initially
move slowPointer by dist 1
move fastPointer by dist 2
when fast pointer reaches to last ele or NULL the firstPointer definetly reaches to middle 
of linkedList.
Finally we will return firstPointer

Time Complexity -> O(N/2)
Space Complexity -> O(1)